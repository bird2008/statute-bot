const fetch = require('node-fetch');

const codeGenerator = (length) => {
    /**
     * @param {length: number}
     * @returns {code: string}
     */
    var result           = '';
    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    for ( var i = 0; i < length; i++ ) {
       result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
};
const colors = {
    blue: 4214184,
    darkblue: 262374,
    cyan: 4249302,
    lightblue: 9943016,
    brown: 6167043,
    darkred: 8717059,
    red: 16711680,
    lightred: 12864593,
    orange: 0xFF7F00,
    darkorange: 10695680,
    darkyellow: 12229378,
    yellow: 16036864,
    lightyellow: 14805006,
    beige: 14913869,
    gold: 8540676,
    green: 1023320,
    darkgreen: 1930500,
    lightgreen: 9492092,
    yellowgreen: 12962816,
    lightpink: 14451962,
    darkpurple: 5046868,
    pink: 13894851,
    silver: 8026489,
    lightgrey: 11579568,
    grey: 3158064,
    black: 0,
    white: 16448250,
    purple: 7997644
};
/**
 * @param {string} date - _d_h_m_s
 * @returns {string} - jours, heures, minutes, secondes
 */
const toLocaleDate = (date) => {
    if(typeof date !== "string") return false;
    
    var days = date.includes("d") ? date.split("d")[0] : "";
    var hours = date.includes("h") ? date.split("h")[0].slice(days ? days.length + 1 : 0) : "";
    var minutes = date.includes("m") ? date.split("m")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0) : "";
    var seconds = date.includes("s") ? date.split("s")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0).slice(minutes ? minutes.length + 1 : 0) : "";
    
    if(days.length <= 0 && hours.length <= 0 && minutes.length <= 0 && seconds.length <= 0) return false;
    
    var time = [];
    if(days.length > 0) time.push(days <= 1 ? `${days} jour` : `${days} jours`);
    if(hours.length > 0) time.push(hours <= 1 ? `${hours} heure` : `${hours} heures`);
    if(minutes.length > 0) time.push(minutes <= 1 ? `${minutes} minute` : `${minutes} minutes`);
    if(seconds.length > 0) time.push(seconds <= 1 ? `${seconds} seconde` : `${seconds} secondes`);
    return time.join(", ");
};
/**
 * @param {string} date - _d_h_m_s
 * @returns {string} - duration (ms)
 */
const toRemaining = (date) => {
    /**
     * @param {date: string}
     * @returns {remaining time: number}
     */
    if(typeof date !== "string") return false;

    var days = date.includes("d") ? date.split("d")[0] : "";
    var hours = date.includes("h") ? date.split("h")[0].slice(days ? days.length + 1 : 0) : "";
    var minutes = date.includes("m") ? date.split("m")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0) : "";
    var seconds = date.includes("s") ? date.split("s")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0).slice(minutes ? minutes.length + 1 : 0) : "";
    
    var duration = 0;
    if(days.length > 0) duration += parseInt(days) * 86400000;
    if(hours.length > 0) duration += parseInt(hours) * 3600000;
    if(minutes.length > 0) duration += parseInt(minutes) * 60000;
    if(seconds.length > 0) duration += parseInt(seconds) * 1000;

    return duration;
};
/**
 * @param {number} int - Le Date.now();
 * @returns {string} - jours, heures, minutes, secondes
 */
const fromIntToLocalDate = (int) => {
    var time = [];
    var days = Math.floor(int / (1000 * 60 * 60 * 24));
    var hours = Math.floor((int % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((int % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((int % (1000 * 60)) / 1000);

    if(days > 0) time.push(`${days} jours`);
    if(hours > 0 || days > 0) time.push(`${hours} heures`);
    if(minutes > 0 || days > 0 || hours > 0) time.push(`${minutes} minutes`);
    if(seconds > 0) time.push(`${seconds} secondes`);
    return time.join(", ");
};
/**
 * @param {string} date -  _d_h_m_s
 * @param {string} format - HH:mm:ss
 * @returns {object}
 */
const toFormatDate = (date, format) => {
    /**
     * @param {date: string | format: string}
     * @returns {formated date: string}
     */
    if(typeof date !== "string" || typeof format !== "string") return false;
    
    var days = date.includes("d") ? date.split("d")[0] : "";
    var hours = date.includes("h") ? date.split("h")[0].slice(days ? days.length + 1 : 0) : "";
    var minutes = date.includes("m") ? date.split("m")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0) : "";
    var seconds = date.includes("s") ? date.split("s")[0].slice(days ? days.length + 1 : 0).slice(hours ? hours.length + 1 : 0).slice(minutes ? minutes.length + 1 : 0) : "";
    
    if(days.length <= 0 && hours.length <= 0 && minutes.length <= 0 && seconds.length <= 0) return false;
    format.replace(/DD/g, days)
        .replace(/HH/g, hours < 10 ? `0${hours}` : hours)
        .replace(/mm/g, minutes < 10 ? `0${minutes}` : minutes)
        .replace(/ss/g, seconds < 10 ? `0${seconds}` : seconds)
    return {
        format: format,
        days: days,
        hours: hours,
        minutes: minutes,
        seconds: seconds
    };
};

/**
 * @typedef {object} Data
 * @property {string} toTranslate - Le texte Ã  traduire
 * @property {string} language - La langue (ex: fr | en | ru | etc...)
 */
/**
 * @param {Data} data 
 * @returns {object} - Le texte d'origine (origin), le texte traduit (translated) & la lang (language)
 */
const translate = async (data) => {
    const { sentences } = await fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${data.language}&dt=t&dj=1&source=input&q=${encodeURIComponent(data.toTranslate)}`).then(url => url.json());
    return {
        origin: sentences[0].orig,
        translated: sentences[0].trans,
        language: data.language
    };
};

module.exports = {
    codeGenerator, colors,
    toLocaleDate, toRemaining,
    toFormatDate, fromIntToLocalDate,
    translate
}